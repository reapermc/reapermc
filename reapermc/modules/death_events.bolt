from copy import deepcopy
from beet.contrib.vanilla import Vanilla
from importlib.resources import read_text
import json
import fnmatch

from ./event_handler import listener
from ./event/on_server_tick import on_server_tick
from ./defer import defer
from ./scoreboard import scoreboard
from ./tag import tag
from ./util import parsed_project_name

_CACHE_ID = -1
_INITIALIZED = False

_event_id_scb = scoreboard(f"{parsed_project_name}.reaper_framework.death_events", _internal=True)

def register_death_event(death_event):
    global _CACHE_ID, _INITIALIZED

    if not _INITIALIZED:
        _INITIALIZED = True

        _setup()

    func_id = id(death_event)


    _CACHE_ID += 1
    _event_id_scb['@s'] = _CACHE_ID
    tag('reaper_framework.death_event')

    function generate_path(f"reaper_framework/death_events/{_CACHE_ID}"):
        death_event()


def _setup():
    @listener(on_server_tick)
    def _find_item_drop():
        as @e[type=item] if data entity @s {Item:{tag:{reaper_framework.death_event:1b}}} at @s:
            execute function generate_path('reaper_framework/__internal__/death_events/get_item_info'):
                store result score $find _event_id_scb:
                    data get entity @s Item.tag.AttributeModifiers[0].Amount

                kill @s

                function generate_path("reaper_framework/__internal__/death_events/find_event")

    @defer
    def _generate_event_tree():
        if _CACHE_ID == -1:
            return
        
        for node in generate_tree(range(_CACHE_ID+1), root=generate_path("reaper_framework/__internal__/death_events/find_event"), key=int):
            append function node.parent:
                if node.partition(4):
                    execute if score $find _event_id_scb matches node.range run function node.children
                else:
                    execute if score $find _event_id_scb matches node.value:
                        function generate_path(f"reaper_framework/death_events/{node.value}")

    @defer
    def _inject_loot_tables():
        payload = json.loads(read_text("reapermc.resources", "death_events_payload.json"))
        vanilla = ctx.inject(Vanilla).mount("data/minecraft/loot_tables/entities")

        payload['entries'][0]['functions'][0]['modifiers'][0]['amount']['score'] = f"{parsed_project_name}{payload['entries'][0]['functions'][0]['modifiers'][0]['amount']['score']}"

        _generate_vanilla_tables(vanilla)
        _inject_tables(payload)

    def _generate_vanilla_tables(vanilla):
        exclude_list = ['minecraft:entities/player']

        for name in vanilla.data.loot_tables.match('minecraft:entities/*'):
            if name in exclude_list or name in ctx.data.loot_tables:
                continue

            table = deepcopy(vanilla.data.loot_tables[name])

            if 'reapermc' in ctx.meta and ctx.meta.reapermc.doMobLoot == False:
                table.data = {"type": "minecraft:entity"}

            ctx.data[name] = table

    def _inject_tables(payload):
        exclude_list = ['minecraft:entities/player', "minecraft:entities/sheep/*"]

        for name, contents in ctx.data.loot_tables.items():
            skip = False

            for n in exclude_list:
                if fnmatch.fnmatch(name, n):
                    skip = True
                    continue

            if skip:
                continue

            if 'pools' not in contents.data:
                contents.data['pools'] = []

            contents.data['pools'].append(payload)
