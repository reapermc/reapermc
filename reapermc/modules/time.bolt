from ./var import var
from ./util import logger, is_expression, binary_progression


_tmp = var(int)

def get_time(mode='daytime'):
    tmp = _tmp
    
    if mode not in ['daytime', 'gametime', 'day']:
        return logger.error(f"Invalid 'get_time()' mode '{mode}'")

    store result score tmp.holder tmp.obj:
        if mode == 'daytime':
            time query daytime
        elif mode == 'gametime':
            time query gametime
        elif mode == 'day':
            time query day

    return tmp 


def set_time(value):
    tmp = _tmp

    if not is_expression(value):
        time set value

    else:
        tmp = value

        gp_prog = binary_progression(16)
        gp_prog.reverse()

        execute function generate_path('reaper_framework/__internal__/set_time/start'):
            time set 0
            
            for v in gp_prog:
                if score tmp.holder tmp.obj matches (v, None):
                    # p_0 = ./set_time
                    p_0 = generate_path('reaper_framework/__internal__/set_time')
                    p_full = f"{p_0}/{v}"
                    
                    execute function p_full:
                        tmp -= v
                        time add v

