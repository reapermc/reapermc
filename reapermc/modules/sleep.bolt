from contextlib import contextmanager
from ./util import logger, SelectorServer, sys_col_hex, data_self, parsed_project_name
from ./var import var
from ./scoreboard import scoreboard
from ./summon import summon
from ./tag import tag, untag
from ./time import get_time
from ./expr import Expr
from ./entity_nbt import EntityNBT
from ./defer import defer
from ./event_handler import listener
from ./event/on_player_join import on_player_join
from ./event/on_server_load import on_server_load


_CACHE_ID = -1
_CACHE_PATH = ''
_PAYLOAD_PATH = ''
_FILTER_TAG = ''
_CTX_MARKER_TAG = 'reaper_framework.sleep.ctx'

_DIM_ID_SCB = scoreboard('reaper_framework.sleep.dim_id', _internal=True)
_TMP = var()
_TMP1 = var()
_TMP_INT = var(int)
_INITIALIZED = False


def _increment_cache_id():
    global _CACHE_ID, _CACHE_PATH, _PAYLOAD_PATH, _FILTER_TAG

    _CACHE_ID += 1
    _CACHE_PATH = generate_path(f"reaper_framework/__internal__/sleep/{_CACHE_ID}")
    _PAYLOAD_PATH = generate_path(f"reaper_framework/sleep/{_CACHE_ID}")
    _FILTER_TAG = f"{parsed_project_name}.reaper_framework.sleep.{_CACHE_ID}"


def _setup():
    # caller: _create_ctx_marker()
    function reaper_framework:__internal__/sleep/create_ctx_marker:
        forceload add 69000 69000
        
        summon marker 69000 0 69000 {Tags:[_CTX_MARKER_TAG], CustomName: f"{{\"text\": \"reaper_framework.sleep.ctx\", \"color\": \"{sys_col_hex}\"}}"}:
            _DIM_ID_SCB['@s'] = _DIM_ID_SCB['#i']
        
        _DIM_ID_SCB['#i'] += 1

    # caller: _get_world_ctx()
    function reaper_framework:__internal__/sleep/get_world_ctx:
        _TMP.remove()
        
        tp @s ~ ~ ~ ~ ~
        _TMP.dim = _DIM_ID_SCB['@s']
        _TMP.pos = data_self.Pos
        _TMP.rot = data_self.Rotation
        tp @s 69000 0 69000

    # caller: _run_at_ctx():
    function reaper_framework:__internal__/sleep/run_at_ctx:
        target_tag = 'reaper_framework.sleep.ctx.target'

        as @e[type=marker,tag=_CTX_MARKER_TAG] if score _TMP_INT.holder _TMP_INT.obj = @s _DIM_ID_SCB at @s:
            execute function reaper_framework:__internal__/sleep/nested_run_at_ctx/0:
                forceload add ~ ~
                data_self.Pos = _TMP1.pos
                data_self.Rotation = _TMP1.rot

                tag(target_tag)

    # caller: _run_at_ctx()
    function reaper_framework:__internal__/sleep/run_at_ctx_1:
        target_tag = 'reaper_framework.sleep.ctx.target'

        as @e[type=marker,tag=target_tag] at @s:
            execute function reaper_framework:__internal__/sleep/nested_run_at_ctx/1:
                forceload remove ~ ~
                untag(target_tag)
                tp @s 69000 0 69000

@listener(on_server_load)
def _on_player_join():
    as @a:
        function reaper_framework:__internal__/sleep/reset_joining_player


@listener(on_player_join)
def _on_player_join():
    function reaper_framework:__internal__/sleep/reset_joining_player

@defer
def _reset_joining_player():
    # counteracts all bugs that may occur when the player leaves before a sleep finished
    sleep_root_nbt = EntityNBT(f"__internal__.{parsed_project_name}.reaper_framework.sleep", ensure_entry=False)
    tmp = var()

    if _CACHE_ID == -1:
        return

    function reaper_framework:__internal__/sleep/reset_joining_player:

        if entity @s[tag=reaper_framework.entity_nbt.user]:
            execute function reaper_framework:__internal__/sleep/reset_joining_player1:
                sleep_root_nbt.remove()

                for n in range(_CACHE_ID + 1):
                    untag(f"{parsed_project_name}.reaper_framework.sleep.{n}")


def _ensure_ctx_marker():
    unless entity @e[tag=_CTX_MARKER_TAG,x=0]:
        function reaper_framework:__internal__/sleep/create_ctx_marker


def _get_world_ctx():
    _ensure_ctx_marker()

    as @e[tag=_CTX_MARKER_TAG,x=0]:
        function reaper_framework:__internal__/sleep/get_world_ctx

    return _TMP



@contextmanager
def _run_at_ctx(context):
    global _TMP_INT, _TMP1

    _TMP_INT = context.dim
    _TMP1 = context

    function reaper_framework:__internal__/sleep/run_at_ctx

    at @e[type=marker,tag=reaper_framework.sleep.ctx.target,limit=1]:
        execute function f"{_CACHE_PATH}/run_at_ctx":
            function reaper_framework:__internal__/sleep/run_at_ctx_1

            yield



@contextmanager
def sleep(interval, selector='auto', threading=True, world_ctx=True):
    global _INITIALIZED

    if not _INITIALIZED:
        _INITIALIZED = True
        _setup()

    _increment_cache_id()
    error_caught = False

    
    if interval <= 0:
        error_caught = True
        logger.error(f"Invalid 'sleep()' interval of {interval}. Has to be a positive integer starting 1.")

    if selector not in ('auto', 's', 'e', 'server', 'entity'):
        error_caught = True
        logger.error(f"Invalid 'sleep()' selector of '{selector}'. Valid options: ['s', 'e', 'server', 'entity']")
    
    if error_caught:
        yield
        return

    execute function f"{_CACHE_PATH}/sel":
        if selector in ('server', 's'):
            if SelectorServer():
                if not threading:
                    _server(interval, world_ctx)
                else:
                    _server_threading(interval, world_ctx)

        elif selector in ('entity', 'e'):
            if not SelectorServer():
                if not threading:
                    _entity(interval, world_ctx)
                else:
                    _entity_threading(interval, world_ctx)

        elif selector == 'auto':
            if SelectorServer():
                if not threading:
                    _server(interval, world_ctx)
                else:
                    _server_threading(interval, world_ctx)
            else:
                if not threading:
                    _entity(interval, world_ctx)
                else:
                    _entity_threading(interval, world_ctx)

    function _PAYLOAD_PATH:
        yield


def _server(interval, world_ctx):
    if not world_ctx:
        schedule function _PAYLOAD_PATH interval replace
        return

    execute function f"{_CACHE_PATH}/s_0":
        context = var()

        context = _get_world_ctx()           # dim, pos, rot

        # scheduled
        schedule function f"{_CACHE_PATH}/s_sch" interval replace:
            with _run_at_ctx(context):
                function _PAYLOAD_PATH


def _server_threading(interval, world_ctx):
    execute function f"{_CACHE_PATH}/s_0":
        ts_arr = var()
        ts = var(int)
        ts_next = var(int)

        if world_ctx:
            context = var()
            ctx1 = var()
            ctx_arr = var()
            
            ctx_arr.append(_get_world_ctx())

        ts_arr.append(get_time('gametime'))

        # scheduled
        schedule function f"{_CACHE_PATH}/s_sch" interval append:
            ts = ts_arr[0]
            ts_next = ts_arr[1]
            ts_arr[0].remove()

            # recursion on tick overlap
            if Expr(ts_next) == ts:
                function f"{_CACHE_PATH}/s_sch"

            if not world_ctx:
                function _PAYLOAD_PATH

            else:
                ctx1 = ctx_arr[0]
                ctx_arr[0].remove()

                with _run_at_ctx(ctx1):
                    function _PAYLOAD_PATH


def _entity(interval, world_ctx):
    execute function f"{_CACHE_PATH}/e_0":
        ts = var(int)
        ts_target = var(int)
        tmp = var()
        tmp1 = var()
        tmp_int = var(int)
        root_nbt = EntityNBT(f"__internal__.{parsed_project_name}.reaper_framework.sleep.{_CACHE_ID}")

        tmp.remove()
        tmp.ts = get_time('gametime')

        if world_ctx:
            context = var()
            ctx1 = var()

            tmp.ctx = _get_world_ctx()

        root_nbt.set(tmp)
        tag(_FILTER_TAG)

        # scheduled
        schedule function f"{_CACHE_PATH}/e_sch" interval replace:
            ts_target = get_time('gametime')
            ts_target -= interval

            # reduce entity search range
            as @e[tag=_FILTER_TAG]:
                execute function f"{_CACHE_PATH}/e_sch_1":
                    tmp1 = root_nbt.get()
                    ts = tmp1.ts

                    # isolate entity
                    if Expr(ts) == ts_target:
                        execute function f"{_CACHE_PATH}/e_sch_2":
                            untag(_FILTER_TAG)
                            root_nbt.remove()

                            if not world_ctx:
                                function _PAYLOAD_PATH

                            else:
                                ctx1 = tmp1.ctx

                                with _run_at_ctx(ctx1):
                                    function _PAYLOAD_PATH


def _entity_threading(interval, world_ctx):
    execute function f"{_CACHE_PATH}/e_0":
        ts = var(int)
        ts_next = var(int)
        ts_target = var(int)
        tmp = var()
        thread_current = var()
        threads = var()
        thread_current = var()
        thread_count = var(int)
        root_nbt = EntityNBT(f"__internal__.{parsed_project_name}.reaper_framework.sleep.{_CACHE_ID}")

        tmp.remove()
        tmp.ts = get_time('gametime')

        if world_ctx:
            context = var()
            ctx1 = var()
            tmp.ctx = _get_world_ctx()

        root_nbt.append(tmp)
        tag(_FILTER_TAG)

        # scheduled
        schedule function f"{_CACHE_PATH}/e_sch" interval append:
            ts_target = get_time('gametime')
            ts_target -= interval

            # reduce entity search range
            as @e[tag=_FILTER_TAG]:
                execute function f"{_CACHE_PATH}/e_sch_1":
                    threads = root_nbt.get()
                    thread_current = threads[0]
                    ts = thread_current.ts

                    # isolate entity
                    if Expr(ts) == ts_target:
                        execute function f"{_CACHE_PATH}/e_sch_2":
                            root_nbt.remove(0)
                            threads[0].remove()
                            ts_next = threads[0].ts

                            store result score thread_count.holder thread_count.obj run data get storage threads._target threads._path

                            if Expr(thread_count) == 0:
                                execute function f"{_CACHE_PATH}/e_sch_3":
                                    untag(_FILTER_TAG)
                                    root_nbt.remove()

                            if not world_ctx:
                                function _PAYLOAD_PATH

                            else:
                                ctx1 = thread_current.ctx

                                with _run_at_ctx(ctx1):
                                    function _PAYLOAD_PATH

                            # recursion tick overlap fix
                            if Expr(ts_next) == ts:
                                function f"{_CACHE_PATH}/e_sch"
